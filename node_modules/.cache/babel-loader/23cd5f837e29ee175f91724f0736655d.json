{"ast":null,"code":"const _lerp = require('lerp');\n/**\n * Drop-in replacement of standard lerp with optional frame delta and target fps\n * to maintain constant animation speed at various fps\n * \n * Based on http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n * \n * @param {number} source Current value\n * @param {number} target Value to lerp towards\n * @param {number} rate Interpolation rate\n * @param {number} frameDelta Optional frame delta time in seconds. Should be 1/60 for a steady 60fps.\n * @param {number} targetFps Optional, target is 60 by default\n * @returns {number} interpolated value\n */\n\n\nfunction lerp(source, target, rate, frameDelta) {\n  let targetFps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 60;\n\n  // return normal lerp if no delta was passed\n  if (typeof frameDelta === 'undefined') {\n    return _lerp(source, target, rate);\n  }\n\n  const relativeDelta = frameDelta / (1 / targetFps);\n  const smoothing = 1 - rate;\n  return _lerp(source, target, 1 - Math.pow(smoothing, relativeDelta));\n}\n\nmodule.exports = lerp;","map":{"version":3,"names":["_lerp","require","lerp","source","target","rate","frameDelta","targetFps","relativeDelta","smoothing","Math","pow","module","exports"],"sources":["/Users/khuong/Desktop/ReactJS/r3f-audio-analyser-forked/node_modules/@14islands/lerp/index.js"],"sourcesContent":["const _lerp = require('lerp')\n\n/**\n * Drop-in replacement of standard lerp with optional frame delta and target fps\n * to maintain constant animation speed at various fps\n * \n * Based on http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n * \n * @param {number} source Current value\n * @param {number} target Value to lerp towards\n * @param {number} rate Interpolation rate\n * @param {number} frameDelta Optional frame delta time in seconds. Should be 1/60 for a steady 60fps.\n * @param {number} targetFps Optional, target is 60 by default\n * @returns {number} interpolated value\n */\n\nfunction lerp(source, target, rate, frameDelta, targetFps = 60){\n  \n  // return normal lerp if no delta was passed\n  if (typeof frameDelta === 'undefined') {\n    return _lerp(source, target, rate)\n  }\n\n  const relativeDelta = frameDelta / (1 / targetFps)\n  const smoothing = 1 - rate\n  return _lerp(source, target, 1 - Math.pow(smoothing, relativeDelta));\n}\n\nmodule.exports = lerp"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,MAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,IAAT,CAAcC,MAAd,EAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCC,UAApC,EAA+D;EAAA,IAAfC,SAAe,uEAAH,EAAG;;EAE7D;EACA,IAAI,OAAOD,UAAP,KAAsB,WAA1B,EAAuC;IACrC,OAAON,KAAK,CAACG,MAAD,EAASC,MAAT,EAAiBC,IAAjB,CAAZ;EACD;;EAED,MAAMG,aAAa,GAAGF,UAAU,IAAI,IAAIC,SAAR,CAAhC;EACA,MAAME,SAAS,GAAG,IAAIJ,IAAtB;EACA,OAAOL,KAAK,CAACG,MAAD,EAASC,MAAT,EAAiB,IAAIM,IAAI,CAACC,GAAL,CAASF,SAAT,EAAoBD,aAApB,CAArB,CAAZ;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBX,IAAjB"},"metadata":{},"sourceType":"script"}