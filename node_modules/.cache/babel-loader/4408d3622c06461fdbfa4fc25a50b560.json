{"ast":null,"code":"import { useCallbackRef as e } from \"@radix-ui/react-use-callback-ref\";\nimport * as t from \"react\";\nexport function useControllableState(_ref) {\n  let {\n    prop: o,\n    defaultProp: r,\n    onChange: n = () => {}\n  } = _ref;\n\n  const [a, u] = function (_ref2) {\n    let {\n      defaultProp: o,\n      onChange: r\n    } = _ref2;\n    const n = t.useState(o),\n          [a] = n,\n          u = t.useRef(a),\n          c = e(r);\n    return t.useEffect(() => {\n      u.current !== a && (c(a), u.current = a);\n    }, [a, u, c]), n;\n  }({\n    defaultProp: r,\n    onChange: n\n  }),\n        c = void 0 !== o,\n        f = c ? o : a,\n        l = e(n);\n\n  return [f, t.useCallback(e => {\n    if (c) {\n      const t = e,\n            r = \"function\" == typeof e ? t(o) : e;\n      r !== o && l(r);\n    } else u(e);\n  }, [c, o, u, l])];\n}","map":{"version":3,"sources":["packages/react/use-controllable-state/src/useControllableState.tsx"],"names":["useControllableState","prop","defaultProp","onChange","uncontrolledProp","setUncontrolledProp","useUncontrolledState","isControlled","undefined","value","handleChange","useCallbackRef","React","useCallback","nextValue","setter","uncontrolledState","useState","prevValueRef","useRef","useEffect","current"],"mappings":";;OAWA,SAASA,oBAAT,OAGa;EAAA,IAHJA;IAAwBC,IAAAA,EAC/BA,CADOD;IAAwBC,WAAAA,EAE/BC,CAFOF;IAAwBC,QAAAA,EAG/BE,CAAAA,GAAW,MAAA,CAAA;EAHJH,CAGI;;EAEX,MAAA,CAAOI,CAAP,EAAyBC,CAAzB,IAqBF,iBAEEF;IAAAA,IAFF;MAAiCD,WAAAA,EAC/BA,CADF;MAAiCA,QAAAA,EAE/BC;IAFF,CAEEA;IAEA,MAAMa,CAAAA,GAAoBJ,CAAAA,CAAMK,QAANL,CAA8BV,CAA9BU,CAA1B;IAAA,MAAwDV,CACjDO,CADiDP,IACxCc,CADhB;IAAA,MAEME,CAAAA,GAAeN,CAAAA,CAAMO,MAANP,CAAaH,CAAbG,CAFrB;IAAA,MAGMF,CAAAA,GAAeC,CAAAA,CAAeR,CAAfQ,CAHrB;IAYA,OAPAC,CAAAA,CAAMQ,SAANR,CAAgB,MAAA;MACVM,CAAAA,CAAaG,OAAbH,KAAyBT,CAAzBS,KACFR,CAAAA,CAAaD,CAAbC,CAAAA,EACAQ,CAAAA,CAAaG,OAAbH,GAAuBT,CAFrBS;IAEqBT,CAH3BG,EAKG,CAACH,CAAD,EAAQS,CAAR,EAAsBR,CAAtB,CALHE,GAOOI,CAAP;EArCgDV,CAqBlD,CArBuE;IAAEJ,WAAAA,EAAAA,CAAF;IAAeC,QAAAA,EAAAA;EAAf,CAqBvE,CArBE;EAAA,MACMI,CAAAA,GAAAA,KAAwBC,CAAxBD,KAAeN,CADrB;EAAA,MAEMQ,CAAAA,GAAQF,CAAAA,GAAeN,CAAfM,GAAsBH,CAFpC;EAAA,MAGMM,CAAAA,GAAeC,CAAAA,CAAeR,CAAfQ,CAHrB;;EAkBA,OAAO,CAACF,CAAD,EAb+DG,CAAAA,CAAMC,WAAND,CACnEE,CAAAA,IAAAA;IACC,IAAIP,CAAJ,EAAkB;MAChB,MAAMQ,CAAAA,GAASD,CAAf;MAAA,MACML,CAAAA,GAA6B,cAAA,OAAdK,CAAc,GAAaC,CAAAA,CAAOd,CAAPc,CAAb,GAA4BD,CAD/D;MAEIL,CAAAA,KAAUR,CAAVQ,IAAgBC,CAAAA,CAAaD,CAAbC,CAAhBD;IAA6BA,CAHnC,MAKEJ,CAAAA,CAAoBS,CAApBT,CAAAA;EAAoBS,CAP4CF,EAUpE,CAACL,CAAD,EAAeN,CAAf,EAAqBI,CAArB,EAA0CK,CAA1C,CAVoEE,CAa/D,CAAP;AAH4CF","sourcesContent":["import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n"]},"metadata":{},"sourceType":"module"}